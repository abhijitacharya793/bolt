// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: enricher.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEnricher = `-- name: CreateEnricher :one
INSERT INTO enricher (id, created_at, updated_at, api_id, scan_id, scan_name, power, scope, tasks, completion, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, created_at, updated_at, api_id, scan_id, scan_name, power, scope, tasks, completion, status
`

type CreateEnricherParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	ApiID      uuid.UUID
	ScanID     uuid.UUID
	ScanName   string
	Power      string
	Scope      string
	Tasks      string
	Completion string
	Status     string
}

func (q *Queries) CreateEnricher(ctx context.Context, arg CreateEnricherParams) (Enricher, error) {
	row := q.db.QueryRowContext(ctx, createEnricher,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ApiID,
		arg.ScanID,
		arg.ScanName,
		arg.Power,
		arg.Scope,
		arg.Tasks,
		arg.Completion,
		arg.Status,
	)
	var i Enricher
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiID,
		&i.ScanID,
		&i.ScanName,
		&i.Power,
		&i.Scope,
		&i.Tasks,
		&i.Completion,
		&i.Status,
	)
	return i, err
}

const deleteEnricher = `-- name: DeleteEnricher :exec
DELETE
FROM enricher
WHERE id = $1
`

func (q *Queries) DeleteEnricher(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEnricher, id)
	return err
}

const getEnricherByID = `-- name: GetEnricherByID :one
SELECT id, created_at, updated_at, api_id, scan_id, scan_name, power, scope, tasks, completion, status
FROM enricher
WHERE id = $1
`

func (q *Queries) GetEnricherByID(ctx context.Context, id uuid.UUID) (Enricher, error) {
	row := q.db.QueryRowContext(ctx, getEnricherByID, id)
	var i Enricher
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiID,
		&i.ScanID,
		&i.ScanName,
		&i.Power,
		&i.Scope,
		&i.Tasks,
		&i.Completion,
		&i.Status,
	)
	return i, err
}

const getEnricherByScanID = `-- name: GetEnricherByScanID :many
SELECT id, created_at, updated_at, api_id, scan_id, scan_name, power, scope, tasks, completion, status
FROM enricher
WHERE scan_id = $1
`

func (q *Queries) GetEnricherByScanID(ctx context.Context, scanID uuid.UUID) ([]Enricher, error) {
	rows, err := q.db.QueryContext(ctx, getEnricherByScanID, scanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enricher
	for rows.Next() {
		var i Enricher
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApiID,
			&i.ScanID,
			&i.ScanName,
			&i.Power,
			&i.Scope,
			&i.Tasks,
			&i.Completion,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnricherByStatus = `-- name: GetEnricherByStatus :many
SELECT id, created_at, updated_at, api_id, scan_id, scan_name, power, scope, tasks, completion, status
FROM enricher
WHERE status = $1
`

func (q *Queries) GetEnricherByStatus(ctx context.Context, status string) ([]Enricher, error) {
	rows, err := q.db.QueryContext(ctx, getEnricherByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enricher
	for rows.Next() {
		var i Enricher
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApiID,
			&i.ScanID,
			&i.ScanName,
			&i.Power,
			&i.Scope,
			&i.Tasks,
			&i.Completion,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEnricher = `-- name: ListEnricher :many
SELECT id, created_at, updated_at, api_id, scan_id, scan_name, power, scope, tasks, completion, status
FROM enricher
`

func (q *Queries) ListEnricher(ctx context.Context) ([]Enricher, error) {
	rows, err := q.db.QueryContext(ctx, listEnricher)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enricher
	for rows.Next() {
		var i Enricher
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApiID,
			&i.ScanID,
			&i.ScanName,
			&i.Power,
			&i.Scope,
			&i.Tasks,
			&i.Completion,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
