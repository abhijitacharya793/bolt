// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: vulnerability.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createVulnerability = `-- name: CreateVulnerability :one
INSERT INTO vulnerability (id, created_at, updated_at, name, risk, command, severity, steps_to_reproduce, power)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, name, risk, command, severity, steps_to_reproduce, power
`

type CreateVulnerabilityParams struct {
	ID               uuid.UUID
	CreatedAt        time.Time
	UpdatedAt        time.Time
	Name             string
	Risk             uuid.UUID
	Command          string
	Severity         string
	StepsToReproduce string
	Power            string
}

func (q *Queries) CreateVulnerability(ctx context.Context, arg CreateVulnerabilityParams) (Vulnerability, error) {
	row := q.db.QueryRowContext(ctx, createVulnerability,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Risk,
		arg.Command,
		arg.Severity,
		arg.StepsToReproduce,
		arg.Power,
	)
	var i Vulnerability
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Risk,
		&i.Command,
		&i.Severity,
		&i.StepsToReproduce,
		&i.Power,
	)
	return i, err
}

const createVulnerabilityFuzzing = `-- name: CreateVulnerabilityFuzzing :one
INSERT INTO vulnerability_fuzzing (id, vulnerability_id, fuzzing_id)
VALUES ($1, $2, $3)
RETURNING id, vulnerability_id, fuzzing_id
`

type CreateVulnerabilityFuzzingParams struct {
	ID              uuid.UUID
	VulnerabilityID uuid.UUID
	FuzzingID       uuid.UUID
}

func (q *Queries) CreateVulnerabilityFuzzing(ctx context.Context, arg CreateVulnerabilityFuzzingParams) (VulnerabilityFuzzing, error) {
	row := q.db.QueryRowContext(ctx, createVulnerabilityFuzzing, arg.ID, arg.VulnerabilityID, arg.FuzzingID)
	var i VulnerabilityFuzzing
	err := row.Scan(&i.ID, &i.VulnerabilityID, &i.FuzzingID)
	return i, err
}

const createVulnerabilityTag = `-- name: CreateVulnerabilityTag :one
INSERT INTO vulnerability_tag (id, vulnerability_id, tag_id)
VALUES ($1, $2, $3)
RETURNING id, vulnerability_id, tag_id
`

type CreateVulnerabilityTagParams struct {
	ID              uuid.UUID
	VulnerabilityID uuid.UUID
	TagID           uuid.UUID
}

func (q *Queries) CreateVulnerabilityTag(ctx context.Context, arg CreateVulnerabilityTagParams) (VulnerabilityTag, error) {
	row := q.db.QueryRowContext(ctx, createVulnerabilityTag, arg.ID, arg.VulnerabilityID, arg.TagID)
	var i VulnerabilityTag
	err := row.Scan(&i.ID, &i.VulnerabilityID, &i.TagID)
	return i, err
}

const deleteVulnerability = `-- name: DeleteVulnerability :exec
DELETE
FROM vulnerability
WHERE id = $1
`

func (q *Queries) DeleteVulnerability(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVulnerability, id)
	return err
}

const getVulnerabilityByID = `-- name: GetVulnerabilityByID :one
SELECT id, created_at, updated_at, name, risk, command, severity, steps_to_reproduce, power
FROM vulnerability
WHERE id = $1
`

func (q *Queries) GetVulnerabilityByID(ctx context.Context, id uuid.UUID) (Vulnerability, error) {
	row := q.db.QueryRowContext(ctx, getVulnerabilityByID, id)
	var i Vulnerability
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Risk,
		&i.Command,
		&i.Severity,
		&i.StepsToReproduce,
		&i.Power,
	)
	return i, err
}

const getVulnerabilityFuzzingByID = `-- name: GetVulnerabilityFuzzingByID :many
SELECT id, vulnerability_id, fuzzing_id
FROM vulnerability_fuzzing
WHERE vulnerability_id = $1
`

func (q *Queries) GetVulnerabilityFuzzingByID(ctx context.Context, vulnerabilityID uuid.UUID) ([]VulnerabilityFuzzing, error) {
	rows, err := q.db.QueryContext(ctx, getVulnerabilityFuzzingByID, vulnerabilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VulnerabilityFuzzing
	for rows.Next() {
		var i VulnerabilityFuzzing
		if err := rows.Scan(&i.ID, &i.VulnerabilityID, &i.FuzzingID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVulnerabilityTagByID = `-- name: GetVulnerabilityTagByID :many
SELECT id, vulnerability_id, tag_id
FROM vulnerability_tag
WHERE vulnerability_id = $1
`

func (q *Queries) GetVulnerabilityTagByID(ctx context.Context, vulnerabilityID uuid.UUID) ([]VulnerabilityTag, error) {
	rows, err := q.db.QueryContext(ctx, getVulnerabilityTagByID, vulnerabilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VulnerabilityTag
	for rows.Next() {
		var i VulnerabilityTag
		if err := rows.Scan(&i.ID, &i.VulnerabilityID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVulnerability = `-- name: ListVulnerability :many
SELECT id, created_at, updated_at, name, risk, command, severity, steps_to_reproduce, power
FROM vulnerability
`

func (q *Queries) ListVulnerability(ctx context.Context) ([]Vulnerability, error) {
	rows, err := q.db.QueryContext(ctx, listVulnerability)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vulnerability
	for rows.Next() {
		var i Vulnerability
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Risk,
			&i.Command,
			&i.Severity,
			&i.StepsToReproduce,
			&i.Power,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
