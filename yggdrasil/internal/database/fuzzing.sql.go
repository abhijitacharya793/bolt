// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: fuzzing.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFuzzing = `-- name: CreateFuzzing :one
INSERT INTO fuzzing (id, created_at, updated_at, part, condition, required)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, part, condition, required
`

type CreateFuzzingParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Part      string
	Condition string
	Required  string
}

func (q *Queries) CreateFuzzing(ctx context.Context, arg CreateFuzzingParams) (Fuzzing, error) {
	row := q.db.QueryRowContext(ctx, createFuzzing,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Part,
		arg.Condition,
		arg.Required,
	)
	var i Fuzzing
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Part,
		&i.Condition,
		&i.Required,
	)
	return i, err
}

const deleteFuzzing = `-- name: DeleteFuzzing :exec
DELETE
FROM fuzzing
WHERE id = $1
`

func (q *Queries) DeleteFuzzing(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFuzzing, id)
	return err
}

const getFuzzingByID = `-- name: GetFuzzingByID :one
SELECT id, created_at, updated_at, part, condition, required
FROM fuzzing
WHERE id = $1
`

func (q *Queries) GetFuzzingByID(ctx context.Context, id uuid.UUID) (Fuzzing, error) {
	row := q.db.QueryRowContext(ctx, getFuzzingByID, id)
	var i Fuzzing
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Part,
		&i.Condition,
		&i.Required,
	)
	return i, err
}

const listFuzzing = `-- name: ListFuzzing :many
SELECT id, created_at, updated_at, part, condition, required
FROM fuzzing
`

func (q *Queries) ListFuzzing(ctx context.Context) ([]Fuzzing, error) {
	rows, err := q.db.QueryContext(ctx, listFuzzing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fuzzing
	for rows.Next() {
		var i Fuzzing
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Part,
			&i.Condition,
			&i.Required,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
