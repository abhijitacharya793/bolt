// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: template.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO template (id, created_at, updated_at, vulnerability, path)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, vulnerability, path
`

type CreateTemplateParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Vulnerability uuid.UUID
	Path          string
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, createTemplate,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Vulnerability,
		arg.Path,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Vulnerability,
		&i.Path,
	)
	return i, err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE
FROM template
WHERE id = $1
`

func (q *Queries) DeleteTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTemplate, id)
	return err
}

const getTemplateByID = `-- name: GetTemplateByID :one
SELECT id, created_at, updated_at, vulnerability, path
FROM template
WHERE id = $1
`

func (q *Queries) GetTemplateByID(ctx context.Context, id uuid.UUID) (Template, error) {
	row := q.db.QueryRowContext(ctx, getTemplateByID, id)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Vulnerability,
		&i.Path,
	)
	return i, err
}

const listTemplate = `-- name: ListTemplate :many
SELECT id, created_at, updated_at, vulnerability, path
FROM template
`

func (q *Queries) ListTemplate(ctx context.Context) ([]Template, error) {
	rows, err := q.db.QueryContext(ctx, listTemplate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Vulnerability,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
