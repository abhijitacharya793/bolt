// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: risk.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRisk = `-- name: CreateRisk :one
INSERT INTO risk (id, created_at, updated_at, name, abbreviation, description, remediation)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, name, abbreviation, description, remediation
`

type CreateRiskParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Name         string
	Abbreviation string
	Description  string
	Remediation  string
}

func (q *Queries) CreateRisk(ctx context.Context, arg CreateRiskParams) (Risk, error) {
	row := q.db.QueryRowContext(ctx, createRisk,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Abbreviation,
		arg.Description,
		arg.Remediation,
	)
	var i Risk
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Abbreviation,
		&i.Description,
		&i.Remediation,
	)
	return i, err
}

const deleteRisk = `-- name: DeleteRisk :exec
DELETE
FROM risk
WHERE id = $1
`

func (q *Queries) DeleteRisk(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRisk, id)
	return err
}

const getRiskByID = `-- name: GetRiskByID :one
SELECT id, created_at, updated_at, name, abbreviation, description, remediation
FROM risk
WHERE id = $1
`

func (q *Queries) GetRiskByID(ctx context.Context, id uuid.UUID) (Risk, error) {
	row := q.db.QueryRowContext(ctx, getRiskByID, id)
	var i Risk
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Abbreviation,
		&i.Description,
		&i.Remediation,
	)
	return i, err
}

const listRisk = `-- name: ListRisk :many
SELECT id, created_at, updated_at, name, abbreviation, description, remediation
FROM risk
`

func (q *Queries) ListRisk(ctx context.Context) ([]Risk, error) {
	rows, err := q.db.QueryContext(ctx, listRisk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Risk
	for rows.Next() {
		var i Risk
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Abbreviation,
			&i.Description,
			&i.Remediation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
