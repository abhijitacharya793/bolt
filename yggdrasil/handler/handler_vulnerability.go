package handler

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/abhijitacharya793/yggdrasil/internal/database"
	"github.com/google/uuid"
)

// VULNERABILITY
func (apiCfg *apiConfig) handlerCreateVulnerability(w http.ResponseWriter, r *http.Request) {
	log.Println("Endpoint Hit: CreateVulnerability")

	type parameters struct {
		Name             string    `json:"name"`
		Risk             uuid.UUID `json:"risk"`
		Command          string    `json:"command"`
		Severity         string    `json:"severity"`
		StepsToReproduce string    `json:"steps_to_reproduce"`
		Power            string    `json:"power"`
		Tag              []string  `json:"tag"`
		Fuzzing          []string  `json:"fuzzing"`
	}

	decoder := json.NewDecoder(r.Body)

	params := parameters{}
	err := decoder.Decode(&params)
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Error passing JSON: %v", err))
		return
	}

	api, err := apiCfg.DB.CreateVulnerability(r.Context(), database.CreateVulnerabilityParams{
		ID:               uuid.New(),
		CreatedAt:        time.Now().UTC(),
		UpdatedAt:        time.Now().UTC(),
		Name:             params.Name,
		Risk:             params.Risk,
		Command:          params.Command,
		Severity:         params.Severity,
		StepsToReproduce: params.StepsToReproduce,
		Power:            params.Power,
	})

	for _, tag := range params.Tag {
		tagUUID, _ := uuid.Parse(tag)
		_, err = apiCfg.DB.CreateVulnerabilityTag(r.Context(), database.CreateVulnerabilityTagParams{
			ID:              uuid.New(),
			VulnerabilityID: api.ID,
			TagID:           tagUUID,
		})
	}
	for _, fuzzing := range params.Fuzzing {
		fuzzingUUID, _ := uuid.Parse(fuzzing)
		_, err = apiCfg.DB.CreateVulnerabilityFuzzing(r.Context(), database.CreateVulnerabilityFuzzingParams{
			ID:              uuid.New(),
			VulnerabilityID: api.ID,
			FuzzingID:       fuzzingUUID,
		})
	}

	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't create API: %v", err))
		return
	}

	respondWithJSON(w, 200, databaseVulnerabilityToVulnerability(api))
}

func (apiCfg *apiConfig) handlerGetVulnerabilityByID(w http.ResponseWriter, r *http.Request) {
	log.Println("Endpoint Hit: GetVulnerabilityByID")

	uuid, _ := uuid.Parse(r.URL.Query().Get("id"))

	api, err := apiCfg.DB.GetVulnerabilityByID(r.Context(), uuid)
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't get api: %v", err))
		return
	}
	respondWithJSON(w, 200, databaseVulnerabilityToVulnerability(api))
}

func (apiCfg *apiConfig) handlerGetVulnerabilityTagByID(w http.ResponseWriter, r *http.Request) {
	log.Println("Endpoint Hit: GetVulnerabilityTagByID")

	uuid, _ := uuid.Parse(r.URL.Query().Get("id"))

	api, err := apiCfg.DB.GetVulnerabilityTagByID(r.Context(), uuid)
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't get api: %v", err))
		return
	}
	respondWithJSON(w, 200, api)
}

func (apiCfg *apiConfig) handlerGetVulnerabilityFuzzingByID(w http.ResponseWriter, r *http.Request) {
	log.Println("Endpoint Hit: GetVulnerabilityFuzzingByID")

	uuid, _ := uuid.Parse(r.URL.Query().Get("id"))

	api, err := apiCfg.DB.GetVulnerabilityFuzzingByID(r.Context(), uuid)
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't get api: %v", err))
		return
	}
	respondWithJSON(w, 200, api)
}

// LIST
func (apiCfg *apiConfig) handlerListVulnerability(w http.ResponseWriter, r *http.Request) {
	log.Println("Endpoint Hit: ListVulnerability")
	api, err := apiCfg.DB.ListVulnerability(r.Context())
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't get apis: %v", err))
		return
	}
	respondWithJSON(w, 200, databaseVulnerabilitysToVulnerabilitys(api))
}

// DELETE
func (apiCfg *apiConfig) handlerDeleteVulnerability(w http.ResponseWriter, r *http.Request) {
	log.Println("Endpoint Hit: DeleteVulnerability")

	uuid, _ := uuid.Parse(r.URL.Query().Get("id"))

	err := apiCfg.DB.DeleteVulnerability(r.Context(), uuid)
	if err != nil {
		respondWithError(w, 400, fmt.Sprintf("Couldn't get apis: %v", err))
		return
	}
	respondWithString(w, 200, "Deleted successfully: "+uuid.String())
}
