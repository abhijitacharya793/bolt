// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createQuery = `-- name: CreateQuery :one
INSERT INTO query (id, created_at, updated_at, name, value, api)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, value, api
`

type CreateQueryParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Value     string
	Api       uuid.UUID
}

func (q *Queries) CreateQuery(ctx context.Context, arg CreateQueryParams) (Query, error) {
	row := q.db.QueryRowContext(ctx, createQuery,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Value,
		arg.Api,
	)
	var i Query
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Value,
		&i.Api,
	)
	return i, err
}

const getQueryByApi = `-- name: GetQueryByApi :many
SELECT id, created_at, updated_at, name, value, api
FROM query
where api = $1
`

func (q *Queries) GetQueryByApi(ctx context.Context, api uuid.UUID) ([]Query, error) {
	rows, err := q.db.QueryContext(ctx, getQueryByApi, api)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Query
	for rows.Next() {
		var i Query
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Value,
			&i.Api,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueryByID = `-- name: GetQueryByID :one
SELECT id, created_at, updated_at, name, value, api
FROM query
WHERE id = $1
`

func (q *Queries) GetQueryByID(ctx context.Context, id uuid.UUID) (Query, error) {
	row := q.db.QueryRowContext(ctx, getQueryByID, id)
	var i Query
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Value,
		&i.Api,
	)
	return i, err
}

const listQuery = `-- name: ListQuery :many
SELECT id, created_at, updated_at, name, value, api
FROM query
`

func (q *Queries) ListQuery(ctx context.Context) ([]Query, error) {
	rows, err := q.db.QueryContext(ctx, listQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Query
	for rows.Next() {
		var i Query
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Value,
			&i.Api,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
