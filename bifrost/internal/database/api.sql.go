// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: api.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createApi = `-- name: CreateApi :one
INSERT INTO api (id, created_at, updated_at, target, root_domain, domain, protocol, protocol_version, port, method,
                 path, body)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, created_at, updated_at, target, root_domain, domain, protocol, protocol_version, port, method, path, body
`

type CreateApiParams struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	Target          string
	RootDomain      string
	Domain          string
	Protocol        string
	ProtocolVersion string
	Port            string
	Method          string
	Path            string
	Body            string
}

func (q *Queries) CreateApi(ctx context.Context, arg CreateApiParams) (Api, error) {
	row := q.db.QueryRowContext(ctx, createApi,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Target,
		arg.RootDomain,
		arg.Domain,
		arg.Protocol,
		arg.ProtocolVersion,
		arg.Port,
		arg.Method,
		arg.Path,
		arg.Body,
	)
	var i Api
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Target,
		&i.RootDomain,
		&i.Domain,
		&i.Protocol,
		&i.ProtocolVersion,
		&i.Port,
		&i.Method,
		&i.Path,
		&i.Body,
	)
	return i, err
}

const deleteApi = `-- name: DeleteApi :exec
DELETE
FROM api
WHERE id = $1
`

func (q *Queries) DeleteApi(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteApi, id)
	return err
}

const getApiByID = `-- name: GetApiByID :one
SELECT id, created_at, updated_at, target, root_domain, domain, protocol, protocol_version, port, method, path, body
FROM api
WHERE id = $1
`

func (q *Queries) GetApiByID(ctx context.Context, id uuid.UUID) (Api, error) {
	row := q.db.QueryRowContext(ctx, getApiByID, id)
	var i Api
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Target,
		&i.RootDomain,
		&i.Domain,
		&i.Protocol,
		&i.ProtocolVersion,
		&i.Port,
		&i.Method,
		&i.Path,
		&i.Body,
	)
	return i, err
}

const listApi = `-- name: ListApi :many
SELECT id, created_at, updated_at, target, root_domain, domain, protocol, protocol_version, port, method, path, body
FROM api
`

func (q *Queries) ListApi(ctx context.Context) ([]Api, error) {
	rows, err := q.db.QueryContext(ctx, listApi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Api
	for rows.Next() {
		var i Api
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Target,
			&i.RootDomain,
			&i.Domain,
			&i.Protocol,
			&i.ProtocolVersion,
			&i.Port,
			&i.Method,
			&i.Path,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
